// Generated by CoffeeScript 1.6.3
(function() {
  var COUNT_CSV, COUNT_INSERTION, CSV_FILES, CUR_CSV_FILE, DB_COLLECTION, DC_CITYS, MongoClient, Schema, async, csv, file, files, fs, mongoose, parseCSV, path, pathToCSVFile, _i, _len;

  mongoose = require('mongoose');

  Schema = mongoose.Schema;

  path = require("path");

  fs = require("fs");

  csv = require("fast-csv");

  async = require("async");

  MongoClient = require("mongodb").MongoClient;

  DC_CITYS = ["北京", "南京", "上海", "汉口", "青岛", "大连", "沈阳", "哈尔", "西安", "天津", "重庆", "广州", "深圳", "香港", "台湾", "澳门"];

  COUNT_CSV = 0;

  COUNT_INSERTION = 0;

  CSV_FILES = [];

  CUR_CSV_FILE = null;

  DB_COLLECTION = null;

  console.log("[mongo-performance::init] %j", process.argv);

  pathToCSVFile = process.argv[2];

  if (!fs.existsSync(pathToCSVFile)) {
    console.log("[mongo-performance::init] missing csv folder at:" + pathToCSVFile);
    process.exit(1);
  }

  try {
    files = fs.readdirSync(pathToCSVFile);
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      if (path.extname(file) === ".csv") {
        CSV_FILES.push(path.join(pathToCSVFile, file));
      }
    }
  } catch (_error) {}

  if (!(CSV_FILES.length > 0)) {
    console.log("[mongo-performance::init] missing csv files at:" + pathToCSVFile);
    process.exit(1);
  }

  console.log("[mongo-performance::init] CSV files to process:" + CSV_FILES);

  MongoClient.connect("mongodb://127.0.0.1:27017/kf", function(err, db) {
    if (err) {
      throw err;
    }
    DB_COLLECTION = db.collection("members");
    console.log("[mongo-performance::init] db is ready");
    return async.eachSeries(CSV_FILES, parseCSV, function(err) {
      if (err != null) {
        return console.log("[mongo-performance::each csv] error:" + err);
      } else {
        return console.log("DONE [mongo-performance::each csv] ALL DONE! csv entry:" + COUNT_CSV + ", db etnry:" + COUNT_INSERTION);
      }
    });
  });

  parseCSV = function(filepath, next) {
    var countInsert, countRead, job;
    job = csv(filepath, {
      headers: true
    });
    countRead = 0;
    countInsert = 0;
    job.on("data", function(data) {
      var address, idCardNum, pos, province;
      ++COUNT_CSV;
      ++countRead;
      delete data["id"];
      delete data["Version"];
      delete data["Taste"];
      idCardNum = String(data["CtfId"] || "");
      if (idCardNum.length === 18) {
        data.birthYear = parseInt(idCardNum.substr(6, 4));
        data.birthMonth = parseInt(idCardNum.substr(10, 2));
        data.provinceCode = parseInt(idCardNum.substr(0, 3));
        data.regionCode = parseInt(idCardNum.substr(0, 6));
      } else if (idCardNum.length === 15) {
        data.birthYear = parseInt("19" + (idCardNum.substr(6, 2)));
        data.birthMonth = parseInt(idCardNum.substr(8, 2));
        data.provinceCode = parseInt(idCardNum.substr(0, 3));
        data.regionCode = parseInt(idCardNum.substr(0, 6));
      } else {
        data.birthYear = parseInt(String(data["Birthday"] || "").substr(0, 4));
        data.birthMonth = parseInt(String(data["Birthday"] || "").substr(4, 2));
      }
      address = data["Address"] || "";
      pos = address.indexOf("省");
      if (pos > 0 && pos < 5) {
        province = address.substring(0, pos);
      } else {
        if ((pos = DC_CITYS.indexOf(address.substr(0, 2))) > 0) {
          province = DC_CITYS[pos];
        }
      }
      if (province != null) {
        data["province"] = province;
      }
      DB_COLLECTION.insert(data, function(err, docs) {
        if (err != null) {
          return console.log("[mongo-performance::db::insert] " + err);
        } else {
          ++COUNT_INSERTION;
          ++countInsert;
          return console.log("[mongo-performance::db::insert] succeed. ALL csv:" + COUNT_CSV + ", insertion:" + COUNT_INSERTION + ", CUR: csv:" + countRead + ", insert:" + countInsert + ", from:" + filepath);
        }
      });
    });
    job.on("error", function(err) {
      console.error("[mongo-performance::job] csv paring error:" + err);
    });
    job.on("end", function() {
      job.removeAllListeners();
      console.log("[mongo-performance::csv::on end] complete " + filepath);
      next();
    });
    job.parse();
  };

}).call(this);
